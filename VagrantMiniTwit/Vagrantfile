# -*- mode: ruby -*-
# vi: set ft=ruby :

$ip_file = "db_ip.txt"

Vagrant.configure("2") do |config|
  config.vm.box = 'digital_ocean'
  config.vm.box_url = "https://github.com/devopsgroup-io/vagrant-digitalocean/raw/master/box/digital_ocean.box"
  config.ssh.private_key_path = '~/.ssh/id_rsa'
  config.vm.synced_folder ".", "/vagrant", type: "rsync"

  config.vm.define "cloudserver", primary: true do |server|
    server.vm.provider :digital_ocean do |provider|
      provider.ssh_key_name = ENV["SSH_KEY_NAME"]
      provider.token = ENV["DIGITAL_OCEAN_TOKEN"]
      provider.image = 'ubuntu-22-04-x64'
      provider.region = 'fra1'
      provider.size = 's-2vcpu-4gb'
      provider.privatenetworking = true
    end

    server.vm.hostname = "cloudserver"

    server.trigger.after :up do |trigger|
      trigger.info =  "Writing cloudserver's IP to file..."
      trigger.ruby do |env,machine|
        remote_ip = machine.instance_variable_get(:@communicator).instance_variable_get(:@connection_ssh_info)[:host]
        File.write($ip_file, remote_ip)
      end
    end

    server.vm.provision "shell", inline: <<-SHELL
      echo "Installing Docker"
      sudo apt install -y docker.io
      sudo usermod -aG docker ${USER}

      echo "Installing Docker-Compose"
      sudo apt install -y docker-compose

      echo "Cloning repo"
      git clone https://github.com/MinitwitGroupI/MiniTwit.git

      echo "Setup droplet monitoring"
      curl -sSL https://repos.insights.digitalocean.com/install.sh | sudo bash

      echo "Setup environment"
      cd MiniTwit/src/backend/

      if [ -s .env ]; then
          echo ".env already contains needed env variables"
      else
          echo "SESSION_SECRET_KEY=uiuiui" > .env
          echo "POSTGRES_USER=postgres" >> .env
          echo "POSTGRES_PASSWORD=postgres" >> .env
          echo "POSTGRES_SERVER=db" >> .env
          echo "POSTGRES_PORT=5432" >> .env
          echo "POSTGRES_DB=minitwit" >> .env
      fi

      echo "Start application with Docker Compose"
      cd ~/MiniTwit/src/
      sudo docker-compose up -d

      echo "Setup HTTPS"
      cd ~
      echo "Update with sudo"
      sudo apt-get -y update
      echo "Install Nginx"
      apt-get -y install nginx
      echo "Cloning repo"
      git clone https://github.com/MinitwitGroupI/MiniTwit.git
      echo "Write to nginx config file"
      cat MiniTwit/VagrantMiniTwit/nginx_config.txt > /etc/nginx/sites-enabled/default
      echo "Reload nginx"
      service nginx reload
      echo "Install snap"
      sudo snap install core; sudo snap refresh core
      echo "Install certbot"
      sudo snap install --classic certbot
      echo "Ensure certbot command can be run"
      sudo ln -s /snap/bin/certbot /usr/bin/certbot
      echo "Run certbot"
      printf '%s\n' mirb@itu.dk Y N opsdev.gg | sudo certbot --nginx
      echo "Reload nginx"
      service nginx reload


      echo "================================================================="
      echo "=                            DONE                               ="
      echo "================================================================="
      echo "Navigate in your browser to:"
      THIS_IP=`hostname -I | cut -d" " -f1`
      echo "http://${THIS_IP}:8000"

    SHELL
  end

  config.vm.define "cloudserversecondary", primary: true do |server|
    server.vm.provider :digital_ocean do |provider|
      provider.ssh_key_name = ENV["SSH_KEY_NAME"]
      # Should possibly be another SSH, but that would require many changes, seeing as much relies on the name "SSH_KEY_NAME"
      provider.token = ENV["DIGITAL_OCEAN_TOKEN"]
      provider.image = 'ubuntu-22-04-x64'
      provider.region = 'fra1'
      provider.size = 's-1vcpu-1gb'
      # Regular size as it's only used testing the staging environment
      provider.privatenetworking = true
    end

    server.vm.hostname = "cloudserversecondary"

    server.trigger.after :up do |trigger|
      trigger.info =  "Writing cloudserversecondary's IP to file..."
      trigger.ruby do |env,machine|
        remote_ip = machine.instance_variable_get(:@communicator).instance_variable_get(:@connection_ssh_info)[:host]
        File.write($ip_file, remote_ip)
      end
    end

    server.vm.provision "shell", inline: <<-SHELL
      echo "Installing Docker"
      sudo apt install -y docker.io
      sudo usermod -aG docker ${USER}

      echo "Installing Docker-Compose"
      sudo apt install -y docker-compose

      echo "Cloning repo"
      git clone https://github.com/MinitwitGroupI/MiniTwit.git

      echo "Setup droplet monitoring"
      curl -sSL https://repos.insights.digitalocean.com/install.sh | sudo bash

      echo "Setup environment"
      cd MiniTwit/src/backend/

      if [ -s .env ]; then
          echo ".env already contains needed env variables"
      else
          echo "SESSION_SECRET_KEY=uiuiui" > .env
          echo "POSTGRES_USER=postgres" >> .env
          echo "POSTGRES_PASSWORD=postgres" >> .env
          echo "POSTGRES_SERVER=db" >> .env
          echo "POSTGRES_PORT=5432" >> .env
          echo "POSTGRES_DB=minitwit" >> .env
      fi

      echo "Start application with Docker Compose"
      cd ~/MiniTwit/src/
      sudo docker-compose up -d


      echo "================================================================="
      echo "=                            DONE                               ="
      echo "================================================================="
      echo "Navigate in your browser to:"
      THIS_IP=`hostname -I | cut -d" " -f1`
      echo "http://${THIS_IP}:8000"

    SHELL
  end
  
  # ideally 'sudo apt-get update' below, but doesn't work after 'rm -r .vagrant/' before calling 'vagrant up'
  config.vm.provision "shell", privileged: false, inline: <<-SHELL
    
  SHELL
end